name: 'Terraform-Deploy'

on:
 workflow_dispatch:
    inputs:
      cpu:
        description: CPU for the agent
        required: true
        default: '1024'
        type: choice
        options: ['256', '512', '1024', '2048', '4096']
      memory:
        description: Memory for the agent
        required: true
        default: '2048'
        type: choice
        options: ['512', '1024', '2048', '4096', '5120', '6144', '7168', '8192']
      name:
        description: Name of the agent
        required: true
        default: 'prefect-default'
        type: string
      image:
        description: Name of the image
        required: true
        default: 'zharec/prefect_agent:latest'
        type: string
        
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-20.04
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    # Initializes secret values to be used in the workflow. 
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1 
        
     # Sets up python on a version that isn't bugged.
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.2' 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
       cd Terraform
       terraform init
      env: 
          name: ${{ secrets.NAME }}
          prefect_account_id: ${{ secrets.PREFECT_ACCOUNT_ID }}
          prefect_workspace_id: ${{ secrets.PREFECT_WORKSPACE_NAME }}
          prefect_api_key: ${{ secrets.PREFECT_API_KEY }}
      
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      id: validate
      run: |
       cd Terraform 
       terraform validate -no-color
       
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
       cd Terraform 
       terraform plan -var name='${{ github.event.inputs.name }}' \
                          -var prefect_account_id='${{ secrets.PREFECT_ACCOUNT_ID }}' \
                          -var prefect_workspace_id='${{ secrets.PREFECT_WORKSPACE_NAME }}' \
                          -var prefect_api_key='${{ secrets.PREFECT_API_KEY }}' \
                          -var agent_image='${{ github.event.inputs.image }}'

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: |
       cd Terraform 
       touch output.json
       terraform apply -var name='${{ github.event.inputs.name }}' \
                           -var prefect_account_id='${{ secrets.PREFECT_ACCOUNT_ID }}' \
                           -var prefect_workspace_id='${{ secrets.PREFECT_WORKSPACE_NAME }}' \
                           -var prefect_api_key='${{ secrets.PREFECT_API_KEY }}' \
                           -var agent_image='${{ github.event.inputs.image }}' \
                           --auto-approve \
                           -json >> output.json
       
      # The outputs of the previous step are not formated correcly, but they are required to be sent to a file so that they don't get printed to the console.
      # This step prints out the correct outputs. 
    - name: Terraform Output
      run: |
       cd Terraform 
       rm output.json
       touch output.json
       terraform output -json > output.json
       cp output.json ../Prefect/Flows
       
       # Log into prefect cloud 
    - name: Prefect login
      run: |
       cd Prefect/Flows
       pip install -U prefect
       pip install pyopenssl --upgrade
       pip install s3fs prefect-aws
       prefect cloud login --key ${{ secrets.PREFECT_API_KEY }} --workspace ${{ secrets.PREFECT_WORKSPACE_NAME }}
       echo "Test Test Test Test Test"
       [ -f output.json ] && echo "FILE exists."
       cat output.json
       python3 --version
       echo "Test Test Test Test Test"
       python deploy_blocks.py

       
       
